# Summary #

The python scripts in this toolbox allow the user to transform a
kernel that is applied directly to nucleotide sequences into a PWM, or
vice versa. Specifically,

- ./code/kernel2PWM.py : transform a kernel into a PWM with a given
  base. The resulting PWM is in meme motif format.

- ./code/PWM2kernel.py : transform a PWM into a kernel with a given
  base. The PWM must be in meme motif format.

- ./code/kernel2PWM_MLE.py : transform a series of kernels into PWMs
  with the base estimated by Maximum Likelihood Estimation (MLE),
  which requires the user to provide sequences from which the kernels
  have been trained. These kernels are assumed to come from a model
  with the following structure: input -> convolution -> linear or ReLU
  activation -> global max-pooling -> arbitrary layers. The kernels,
  sequences, and PWMs are all stored as hdf5 tensors.


The following datasets are for testing purposes, and they also
illustrates how the input should be formatted. For the details of
input formats, please refer to the help message of each script (use
"-h" to show the help message).

- ./data/toy_kernel_matrix.txt : a toy example of the kernel file
  describing the kernel matrix.

- ./data/toy_PWM.meme : a toy example of the PWM file describing the
  PWM matrix.

- ./data/toy_PWM_2_with_zero.meme : another toy example of the PWM
  file. This PWM contains a zero element, which will be detected and
  corrected by ./code/PWM2kernel.py.

- ./data/for.3..1.kernel.tensor.hdf5 and
  ./data/for.3..1.sequence.tensor.hdf5 : a toy example of the kernel
  and sequence tensors.

# Prerequisites #

- Python 2.7 and the following packages:
    - numpy
    - h5py (for ./code/kernel2PWM_MLE.py only)
    - scipy (for ./code/kernel2PWM_MLE.py only)

# Example usages #

Run the following commands under the root directory (where the "code"
and "data" directories are):

$ python ./code/kernel2PWM.py ./data/toy_kernel_matrix.txt ./data/toy_kernel_transformed_PWM.meme

$ python ./code/PWM2kernel.py ./data/toy_PWM.meme ./data/toy_PWM_transformed_kernel.txt

$ python ./code/PWM2kernel.py ./data/toy_PWM_2_with_zero.meme ./data/toy_PWM_2_with_zero_transformed_kernel.txt

$ python ./code/kernel2PWM_MLE.py ./data/for.3..1.kernel.tensor.hdf5 ./data/for.3..1.sequence.tensor.hdf5 ./data/for.3..1.PWM.tensor.hdf5


